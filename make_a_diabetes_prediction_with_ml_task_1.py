# -*- coding: utf-8 -*-
"""Make a Diabetes Prediction with ML :TASK_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_T_86uc_W-RsW-QsxhZkxvCy86KyY0H
"""

# separating the data and labels
x=df.drop(['Outcome'],axis='columns')
y=df['Outcome']

import pandas as pd
import numpy as np
df=pd.read_csv("/content/task1.csv")
df

print(x)

print(y)

# printing the first 5 rows of the dataset
df.head()

# number of rows and Columns in this dataset
df.shape

# getting the statistical measures of the data
df.describe()

df['Outcome'].value_counts()

df.groupby('Outcome').mean()

# Train Test Split

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(x_train,y_train)
standardized_data = scaler.transform(x)
print(standardized_data)

X = standardized_data
Y = df['Outcome']
print(X)
print(Y)

# Train The Model

from sklearn import svm
classifier = svm.SVC(kernel='linear')
classifier.fit(x_test,y_test)

#Model Evaluation

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

# accuracy score on the training data

X_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(X_train_prediction, y_train)

print('Accuracy score of  training data           : ', training_data_accuracy)
print('Classification_report of training data     :',training_data_accuracy)
print('Confusion_matrix of training data          :',training_data_accuracy)


# accuracy score on the test data
X_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(X_test_prediction, y_test)

print('Accuracy score of  test data               : ',  test_data_accuracy)
print('Classification_report test data            :',   test_data_accuracy)
print('Confusion_matrix test data                 :',   test_data_accuracy)

# Confunsion Matrix

import matplotlib.pyplot as plt
import seaborn as sns
cm=confusion_matrix(X_test_prediction, y_test)
sns.heatmap(cm,annot=True,cbar=False,fmt='d',cmap="coolwarm")
plt.show()